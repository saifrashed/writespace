import Head from "next/head";
import Image from "next/image";
import NavBar from "@/components/NavBar";
import { useRouter } from "next/router";
import React, { useContext, useEffect, useState } from "react";
import Link from 'next/link';
import useAssignment from "@/lib/hooks/useAssignment";
import useAuthentication from "@/lib/hooks/useAuthentication";
import Button from "@/components/stdButton";
import UploadPopup from "@/components/uploadPopup";
import useSubmission from "@/lib/hooks/useSubmission";
import useEnrollments from "@/lib/hooks/useEnrollments";
import useSubmissions from "@/lib/hooks/useSubmissions";
import useUsers from "@/lib/hooks/useUsers";

import { formatDate } from "@/lib/date";
import { motion } from "framer-motion";
import useCourse from "@/lib/hooks/useCourse";
import { Enrollment } from "@/lib/types";
import { Context } from "@/Context";

const Assignments = () => {
  const router = useRouter();
  // Accessing query parameters from the router object
  const { courseId, assignmentId } = router.query;
  const { token } = useAuthentication();
  const { assignment: contextAssignment } = useContext(Context); // When pressing a course
  const { assignment: fetchedAssignment, getAssignment } = useAssignment(); // When navigating to a course via url
  const assignment = contextAssignment || fetchedAssignment;

  const { submission, getSubmission } = useSubmission()
  const { submissions, getSubmissions } = useSubmissions()
  const { enrollments, getEnrollments } = useEnrollments()
  const { users, getUsers } = useUsers()

  const { course: contextCourse } = useContext(Context); // When pressing a course
  const { course: fetchedCourse, getCourse } = useCourse(); // When navigating to a course via url
  const course = contextCourse || fetchedCourse;

  const [isTeacher, setIsTeacher] = useState()

  // For the upload popup.
  const [showPopup, setShowPopup] = useState(false);

  const getUserDataById = (user_id: Number) => {
    return users.find((user) => user.id === user_id) || null;
  };

  const togglePopup = () => {
    setShowPopup(!showPopup);
  };

  useEffect(() => {
    if (courseId && assignmentId && token) {
      getCourse(parseInt(courseId.toString()), token)
      getAssignment(parseInt(courseId.toString()), parseInt(assignmentId.toString()), token)
    }
  }, [router.query]);

  useEffect(() => {
    if (course) {
      setIsTeacher(course.enrollments?.some((enrollment: Enrollment) => enrollment?.type === "teacher"))
    }
  }, [course]);

  useEffect(() => {
    if (courseId && assignmentId && token) {
      if (typeof isTeacher === 'boolean') {
        if (isTeacher) {
          getSubmissions(parseInt(courseId.toString()), parseInt(assignmentId.toString()), token)
          getUsers(parseInt(courseId.toString()), token)
        } else {
          getSubmission(parseInt(courseId.toString()), parseInt(assignmentId.toString()), token)
        }
      }
    }
  }, [isTeacher])

  return (
    <>
      <Head>
        <title>Assignment - WriteSpace</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <NavBar />

      <div className="bg-gray-50 min-h-screen py-10 mt-12">
        <div className="max-w-5xl mx-auto px-6">
          <div className="flex items-center justify-between mb-6">
            <motion.h1 layoutId={assignment?.name} className="text-3xl font-bold">{assignment?.name}</motion.h1>
          </div>

          <div className="grid grid-cols-1 gap-0 md:grid-cols-5 ">
            <div className="col-span-1 p-4">
            </div>
            <div className="col-span-3 p-4">
              <motion.div layoutId={assignment?.due_at?.toString()}>
                <p className="mt-8 text-gray-600">
                  <span className="font-bold">Deadline: </span> {assignment?.due_at ? formatDate(assignment?.due_at) : "No due date"}</p>
              </motion.div>
            </div>
          </div>

          <div className="flex justify-center">
            <div className="w-full relative overflow-x-auto shadow-md sm:p-2 md:p-4 lg:p-8 md:w-4/5">
              <table className="w-full text-sm text-left bg-white">
                <thead className="text-xs text-gray-700 uppercase bg-gray-100 dark:bg-gray-700 dark:text-gray-400">
                  <tr>
                    <th scope="col" className="px-6 py-4 whitespace-nowrap">
                      Name
                    </th>
                    <th scope="col" className="px-6 py-4 whitespace-nowrap">
                      Student ID
                    </th>
                    <th scope="col" className="px-6 py-4 whitespace-nowrap">
                      Submission Status
                    </th>
                    <th scope="col" className="px-6 py-4 whitespace-nowrap">
                      Grade Status
                    </th>
                  </tr>
                </thead>
                <tbody>
                  {submissions.map((submission) => (
                    <tr
                      key={submission.user_id}
                      className="bg-white border-b dark:bg-gray-800 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600"
                    >
                      <td className="px-6 py-4 whitespace-nowrap">
                        <Link
                          href={`/courses/${courseId}/assignment/${assignmentId}/submission/grade`}
                        >
                          {getUserDataById(submission.user_id)?.name || "Unknown"}
                        </Link>
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {submission.user_id}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {submission.submitted_at ? "Submitted" : "Not Submitted"}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap">
                        {submission.grade ? "Graded" : "Not Graded"}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>



        </div>
      </div>
    </>
  );
};

export default Assignments;
